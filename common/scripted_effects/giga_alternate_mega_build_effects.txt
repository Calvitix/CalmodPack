
# this = country scope
giga_amb_apply_initial_country_modifiers = {
	set_country_flag = @giga_amb_init_flag

	# apply base modifier
	add_modifier = {
		modifier = giga_amb_base
	}

	# set AI limit variable so that we don't get logged errors for checking it
	set_variable = {
		which = giga_amb_ai_limit
		value = 0
	}
	set_variable = {
		which = giga_amb_ai_limit_modifier
		value = 0
	}

	# sets raio variable for use in tooltips because you can't read scripted variables it seems...
	set_variable = {
		which = giga_amb_ratio
		value = @giga_amb_ratio
	}

	# assign the bonus to empires which rely a lot on mega build speed in early game
	if = {
		limit = {
			or = {
				has_origin = origin_void_dwellers
				has_origin = origin_frameworld
				has_origin = origin_incohesive
			}
		}

		capital_scope = {
			add_deposit = d_giga_amb_start_bonus
		}
		add_research_option = giga_tech_amb_supertensiles
	}

	# set up the actual limit if we're AI
	# this is also calculated on yearly pulse, but might as well just to be sure
	if = {
		limit = {
			is_ai = yes
		}
		giga_amb_recalculate_ai_limit = yes
	}
}

# this = country scope
giga_amb_recalculate_country_modifiers = {

	# remove calc modifiers
	set_update_modifiers_batch = begin

	remove_modifier = giga_amb_flat_replacement
	remove_modifier = giga_amb_speed
	remove_modifier = giga_amb_storage_capacity

	set_update_modifiers_batch = end # this forces a recalculation of modifers so the next part reads the modifier values without these modifiers

	# read resource capacity mod to var
	export_modifier_to_variable = {
		modifier = country_resource_max_add
		variable = giga_amb_storage_capacity
	}
	# add resource capacity adjustment
	add_modifier = {
		modifier = giga_amb_storage_capacity
		multiplier = giga_amb_storage_capacity
	}

	# read cap mod to var
	export_modifier_to_variable = {
		modifier = country_megastructure_build_cap_add
		variable = giga_amb_cap
	}
	# base is 1000 so subtract 999
	change_variable = {
		which = giga_amb_cap
		value = -999
	}
	# add back the AI sensible limit offset, which is 0 for humans
	change_variable = {
		which = giga_amb_cap
		value = giga_amb_ai_limit
	}

	# read base speed to var
	export_modifier_to_variable = {
		modifier = megastructure_build_speed_add
		variable = giga_amb_flat
	}
	change_variable = {
		which = giga_amb_flat
		value = 1
	}
	
	# add calc flat replacement modifier if the value is > 0
	if = {
		limit = {
			check_variable = {
				which = giga_amb_flat
				value > 0
			}
		}
		add_modifier = {
			modifier = giga_amb_flat_replacement
			multiplier = giga_amb_flat
		}
	}

	# get mega job income
	export_resource_income_to_variable = {
		resource = giga_sr_amb_megaconstruction
		variable = giga_amb_income
	}

	# get stockpile drain
	set_variable = {
		which = giga_amb_stockpile
		value = value:giga_amb_stockpile_calc
	}

	# calculate total progress
	set_variable = {
		which = giga_amb_total_progress
		value = value:giga_amb_total_progress_calc
	}

	# count all building megas
	set_variable = {
		which = giga_amb_building_megas
		value = value:giga_amb_building_megas_calc
	}

	# calc progress per mega
	set_variable = {
		which = giga_amb_progress
		value = value:giga_amb_progress_calc
	}

	# add the final progress modifier
	add_modifier = {
		modifier = giga_amb_speed
		multiplier = giga_amb_progress
	}
}

giga_amb_recalculate_country_modifiers_and_consume = {

	giga_amb_recalculate_country_modifiers = yes

	# subtract drain from stockpile if there's at least one running project
	if = {
		limit = {
			check_variable = {
				which = giga_amb_building_megas
				value > 0
			}
		}

		add_resource = {
			giga_sr_amb_megaconstruction = -1
			mult = giga_amb_stockpile
		}
	}
}

# just recalculate the speed modifier based on number of megas
# for triggering on start/end build
giga_amb_recalculate_split = {
	remove_modifier = giga_amb_speed

	# count all building megas
	set_variable = {
		which = giga_amb_building_megas
		value = value:giga_amb_building_megas_calc
	}

	# calc progress per mega
	set_variable = {
		which = giga_amb_progress
		value = value:giga_amb_progress_calc
	}

	# add the final progress modifier
	add_modifier = {
		modifier = giga_amb_speed
		multiplier = giga_amb_progress
	}

	# debug event firing
	#country_event = { id = giga_frameworld_origin.001 }
}

# recalculate the reduction in AI build limit to match their income
# so they don't do dumb stuff like repairing 10 pieces of onion ringworld
# with a build speed of only 1.4...
giga_amb_recalculate_ai_limit = {
	remove_modifier = giga_amb_ai_limit

	set_variable = {
		which = giga_amb_ai_limit
		value = value:giga_amb_ai_limit_calc
	}

	set_variable = {
		which = giga_amb_ai_limit_modifier
		value = 1000
	}
	subtract_variable = {
		which = giga_amb_ai_limit_modifier
		value = giga_amb_ai_limit
	}

	add_modifier = {
		modifier = giga_amb_ai_limit
		multiplier = giga_amb_ai_limit_modifier
	}
}