# Original File
#
# Calvitix Check 3.5 22.09.2022
#
# Merge with STARNET AI    05.03.2022
#
#
## Categories used in this file must have use_for_ai_budget = yes defined in economic_categories ##
## It is possible to have multiple entries with the same category and resource ##

#################
## Expenditure ##
#################
consumer_goods_expenditure_buffer = { # Buffer, will not be spent
	resource = consumer_goods
	type = expenditure
	category = buffer

	potential = {
		always = yes
	}

	weight = {
		weight = 0.05
	}
}

#consumer_goods_expenditure_colonies = {
#	resource = consumer_goods
#	type = expenditure
#	category = colonies
	
#	potential = {
#		always = yes
#	}
	
#	weight = {
#		weight = 0.3
#	}	
#}

consumer_goods_expenditure_colonies_expand = {
	resource = consumer_goods
	type = expenditure
	category = colonies

	potential = {
		is_regular_empire = yes
		ai_colonize_plans > 0
		OR = {
			AND = {
				is_lithoid_empire = no
				has_resource = { type = food amount > 400 }
				has_monthly_income = {
					resource = food
					value > 0
				}
			}
			AND = {
				is_lithoid_empire = yes
				has_resource = { type = minerals amount > 400 }
				has_monthly_income = {
					resource = minerals
					value > 0
				}
			}
		}
	}

	weight = {
		weight = 0.5
	}

	desired_min = {
		base = 200
	}

	desired_max = {
		base = 250
	}
}

consumer_goods_expenditure_trade  = {
	resource = consumer_goods
	type = expenditure
	category = trade
	
	potential = {
		always = yes
	}
	
	weight = {
		weight = 0
	}	
	desired_min = {
		base = 0
		modifier = {
			add = 40
			resource_stockpile_compare = {
				resource = consumer_goods
				value > 4000
			}
			resource_stockpile_compare = {
				resource = energy
				value < 1000
			}
			resource_income_compare = {
				resource = consumer_goods
				value > 20
			}
			resource_income_compare = {
				resource = energy
				value < 10
			}
		}
		
		modifier = {
			add = 40
			ai_colonize_plans < 1
			resource_stockpile_compare = {
				resource = consumer_goods
				value > 1000
			}
			resource_stockpile_compare = {
				resource = energy
				value < 300
			}
			resource_income_compare = {
				resource = consumer_goods
				value > 10
			}
			resource_income_compare = {
				resource = energy
				value < 0
			}
		}
	}
}

consumer_goods_expenditure_decisions = {
	resource = consumer_goods
	type = expenditure
	category = decisions

	potential = {
		always = yes
	}

	weight = {
		weight = 0.05
	}
	desired_min = {
		base = 0
		modifier = {
			add = 1000
			resource_stockpile_compare = {
				resource=consumer_goods
				value > 300
			}
			resource_income_compare = {
				resource=consumer_goods
				value > 5
			}
		}
	}
}
consumer_goods_expenditure_decisions_excess  = {
	resource = consumer_goods
	type = expenditure
	category = decisions
	
	potential = {
		resource_stockpile_compare = {
			resource = consumer_goods
			value > 5000
		}
	}
	
	weight = {
		weight = 0.5
	}	
	desired_min = {
		base = 1000
	}
}

############
## Upkeep ##
############
consumer_goods_upkeep_buffer = {	# Buffer, will not be spent
	resource = consumer_goods
	type = upkeep
	category = buffer

	potential = {
		always = yes
	}

	weight = {
		weight = 0.1
	}
}

consumer_goods_upkeep_country = {	# Buffer, will not be spent
	resource = consumer_goods
	type = upkeep
	category = country

	potential = {
		always = yes
	}

	weight = {
		weight = 0.9
	}
}
